{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","MessageCard.tsx","RightPane.tsx","ConversationCard.tsx","LeftPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","inbox","ws","WebSocket","addEventListener","e","console","log","data","p","JSON","parse","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","onClick","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","MessageCard","own","content","Date","timeStamp","toLocaleTimeString","PureComponent","RightPane","m","forceUpdate","removeAllEventListener","text","referenceTo","contentType","onBack","name","map","key","id","senderId","user","onSend","ConversationCard","lastMessage","length","selected","onSelect","toLocaleDateString","LeftPane","tag","sendContactRequest","selectedConversation","firstMessage","c","Main","undefined","App","loggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.639af595.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from './chat'\r\nimport { EventProducer } from './EventProducer';\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    inbox: InboxDto | null = null;\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n\r\n        this.ws.addEventListener(\"open\", () => {\r\n            // this.sendPacket( //TODO delete\r\n            //     {\r\n            //         type: \"register\",\r\n            //         email: \"gabor0414@hotmail.com\",\r\n            //         password: \"123\",\r\n            //         displayName: \"gb\",\r\n            //         staySignedIn: false\r\n            //     }\r\n            // )\r\n        });\r\n\r\n        this.ws.addEventListener(\"message\", e => {\r\n            console.log(e.data) //TODO delete\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message)\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch('conversation', p.conversation.channelId)\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\ninterface ProxyEventMap\r\n{\r\n\"login\": () => void;\r\n\"message\": ( channelId: string, message: MessageDto ) => void;\r\n\"conversation\": ( channelId: string ) => void;\r\n}\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    \r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[ K ]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n}","import { Component } from 'react';\r\nimport React from 'react';\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} \r\n                    {...attrs}\r\n                />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy'\r\nimport { TextInput } from './TextInput'\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput\r\n                    type=\"email\"\r\n                    placeholder=\"Email (someone@example.com)\"\r\n                    value={this.state.email}\r\n                    onChange={e => {\r\n                        this.setState({ email: e });\r\n                        if (this.state.email===\"kiqhl3\") {\r\n                            this.setState({ displayName: \"Gabor\" })\r\n                        }\r\n                    }} \r\n                    onEnter={ () => this.onClick() } \r\n                    autofocus={ true }\r\n                    />\r\n\r\n                <TextInput\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    onChange={e =>\r\n                        this.setState({ password: e })\r\n                    }\r\n                    onEnter={ () => this.onClick() }\r\n                />\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} \r\n                        onEnter={ () => this.onClick() }\r\n                    />}\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n}","import { TextInput, TextInputOptions } from './TextInput';\r\nimport { Component } from 'react';\r\nimport React from 'react'\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    \r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\n\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: 'K: ' + text\r\n        });\r\n        return true;\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport React from \"react\"\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { RightPane } from \"./RightPane\";\r\nimport { LeftPane } from \"./LeftPane\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { proxy } from './Proxy'\nimport { Main } from './Main';\n\nexport default class App extends Component {\n  state = { loggedIn: false }\n\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ loggedIn: true }), this)\n  }\n  \n  render() {\n    return (\n      <div className=\"app\">\n        { this.state.loggedIn ? <Main /> : <Login/> }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}